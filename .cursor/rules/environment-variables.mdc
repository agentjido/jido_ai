<rule>
name: environment_variables
description: Standards for accessing environment variables in Jido.AI
filters:
  # Match Elixir files
  - type: file_extension
    pattern: "\\.ex$|\\.exs$"
  # Match potential environment variable access
  - type: content
    pattern: "(?i)System\\.get_env|Dotenvy\\.env|ENV\\[|getenv"

actions:
  - type: suggest
    conditions:
      - pattern: "System\\.get_env\\(.*?\\)"
        message: "Use Jido.AI.Keyring.get/3 instead of System.get_env/1 for accessing environment variables"
      - pattern: "Dotenvy\\.env!\\(.*?\\)"
        message: "Use Jido.AI.Keyring.get/3 instead of Dotenvy.env!/2 for accessing environment variables"
    message: |
      ## Environment Variables Access

      Always use `Jido.AI.Keyring` to access environment variables instead of directly using `System.get_env/1` or `Dotenvy`. The Keyring module provides a centralized way to access configuration values with proper fallbacks and session-specific overrides.

      ### Preferred Pattern

      ```elixir
      # Good - Using Keyring
      api_key = Jido.AI.Keyring.get(server, :api_key, "default_value")
      ```

      ### Anti-patterns

      ```elixir
      # Bad - Direct System.get_env access
      api_key = System.get_env("API_KEY") || "default_value"

      # Bad - Direct Dotenvy access
      api_key = Dotenvy.env!("API_KEY", :string)
      ```

      ### Benefits of Using Keyring

      1. **Centralized Configuration**: All configuration is managed in one place
      2. **Proper Fallbacks**: Values are looked up with proper precedence (session values > environment variables > application config > defaults)
      3. **Session-specific Overrides**: Values can be overridden for specific processes
      4. **Testability**: Makes testing easier by allowing test-specific values
      5. **Consistent API**: Provides a consistent API for accessing configuration values

examples:
  - input: |
      # Bad example
      api_key = System.get_env("API_KEY") || "default"
      
      # Another bad example
      token = Dotenvy.env!("AUTH_TOKEN", :string)
    output: |
      # Good example
      api_key = Jido.AI.Keyring.get(server, :api_key, "default")
      
      # Another good example
      token = Jido.AI.Keyring.get(server, :auth_token)

metadata:
  priority: high
  version: 1.0
</rule> 